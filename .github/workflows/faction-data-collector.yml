name: Faction Data Collector

on:
  schedule:
    # Run every 5 minutes
    - cron: '*/5 * * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  collect-faction-data:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: npm install mongodb axios
      
    - name: Create faction collector script
      run: |
        cat > collect-faction-data.js << 'EOF'
        const { MongoClient } = require('mongodb');
        const axios = require('axios');
        
        // MongoDB connection string
        const MONGODB_URI = 'mongodb+srv://oowol003:TornData2341@torndata.vxouoj6.mongodb.net/?retryWrites=true&w=majority&appName=TornData';
        const DATABASE_NAME = 'torn_data';
        const COLLECTION_NAME = 'factions';
        
        // Torn API configuration
        const TORN_API_BASE = 'https://api.torn.com/v2';
        const API_KEY = process.env.TORN_API_KEY;
        
        async function connectToMongoDB() {
          try {
            const client = new MongoClient(MONGODB_URI);
            await client.connect();
            console.log('Connected to MongoDB');
            return client;
          } catch (error) {
            console.error('Failed to connect to MongoDB:', error);
            throw error;
          }
        }
        
        async function fetchFactionData(offset = 0) {
          try {
            const url = `${TORN_API_BASE}/torn/factionhof?limit=100&offset=${offset}&cat=rank&key=${API_KEY}`;
            console.log(`Fetching faction data from offset ${offset}...`);
            
            const response = await axios.get(url);
            
            if (response.data.error) {
              console.error('API Error:', response.data.error);
              return null;
            }
            
            return response.data.factionhof || [];
          } catch (error) {
            console.error('Failed to fetch faction data:', error.message);
            return null;
          }
        }
        
        async function updateFactionInDatabase(db, factionData) {
          try {
            const collection = db.collection(COLLECTION_NAME);
            
            // Prepare the faction document
            const factionDoc = {
              id: factionData.id,
              name: factionData.name,
              members: factionData.members,
              position: factionData.position,
              rank: factionData.rank,
              respect: factionData.values?.respect || 0,
              chain: factionData.values?.chain || null,
              chain_duration: factionData.values?.chain_duration || null,
              last_updated: new Date(),
              created_at: new Date() // Will be set only on first insert
            };
            
            // Use upsert to update existing or insert new
            const result = await collection.updateOne(
              { id: factionData.id },
              { 
                $set: factionDoc,
                $setOnInsert: { created_at: new Date() }
              },
              { upsert: true }
            );
            
            if (result.upsertedCount > 0) {
              console.log(`‚úÖ Inserted new faction: ${factionData.name} (ID: ${factionData.id})`);
            } else if (result.modifiedCount > 0) {
              console.log(`üîÑ Updated faction: ${factionData.name} (ID: ${factionData.id})`);
            } else {
              console.log(`‚è≠Ô∏è  No changes for faction: ${factionData.name} (ID: ${factionData.id})`);
            }
            
            return result;
          } catch (error) {
            console.error(`Failed to update faction ${factionData.id}:`, error);
            return null;
          }
        }
        
        async function collectAllFactionData() {
          let client;
          try {
            client = await connectToMongoDB();
            const db = client.db(DATABASE_NAME);
            
            let offset = 0;
            let totalFactions = 0;
            let totalUpdated = 0;
            let totalInserted = 0;
            
            console.log('üöÄ Starting faction data collection...');
            console.log(`üìÖ Collection time: ${new Date().toISOString()}`);
            
            while (true) {
              const factions = await fetchFactionData(offset);
              
              if (!factions || factions.length === 0) {
                console.log(`üìä No more factions found at offset ${offset}`);
                break;
              }
              
              console.log(`üì¶ Processing ${factions.length} factions from offset ${offset}...`);
              
              for (const faction of factions) {
                const result = await updateFactionInDatabase(db, faction);
                if (result) {
                  totalFactions++;
                  if (result.upsertedCount > 0) {
                    totalInserted++;
                  } else if (result.modifiedCount > 0) {
                    totalUpdated++;
                  }
                }
              }
              
              // Move to next batch
              offset += 100;
              
              // Add a small delay to be respectful to the API
              await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            console.log('\nüìà Collection Summary:');
            console.log(`   Total factions processed: ${totalFactions}`);
            console.log(`   New factions inserted: ${totalInserted}`);
            console.log(`   Existing factions updated: ${totalUpdated}`);
            console.log(`   Unchanged factions: ${totalFactions - totalInserted - totalUpdated}`);
            
            // Get collection stats
            const collection = db.collection(COLLECTION_NAME);
            const totalInDB = await collection.countDocuments();
            console.log(`   Total factions in database: ${totalInDB}`);
            
          } catch (error) {
            console.error('‚ùå Collection failed:', error);
            throw error;
          } finally {
            if (client) {
              await client.close();
              console.log('üîå Disconnected from MongoDB');
            }
          }
        }
        
        // Run the collection
        if (!API_KEY) {
          console.error('‚ùå TORN_API_KEY environment variable is required');
          process.exit(1);
        }
        
        collectAllFactionData()
          .then(() => {
            console.log('‚úÖ Faction data collection completed successfully');
            process.exit(0);
          })
          .catch((error) => {
            console.error('‚ùå Faction data collection failed:', error);
            process.exit(1);
          });
        EOF
        
    - name: Run faction data collection
      env:
        TORN_API_KEY: ${{ secrets.TORN_API_KEY }}
      run: node collect-faction-data.js
      
    - name: Upload logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: faction-collection-logs
        path: |
          *.log
          collect-faction-data.js 